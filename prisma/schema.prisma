// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  profile     Profile?
  applications Application[]
  skills      UserSkill[]
  jobs        Job[] // For User role company that are the position the company has, a company has jobs but not a proffessional
  offers      Offer[] // For User role proffessional that are the position the proffessional has, a proffesional has offers but not a company
  roleId Int
  Role    Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @default("Proffessional")

  // One to Many relation with User
  Users User[]
}

model Profile {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  bio      String?
  location String?
  website  String?
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  requirements String
  userId      Int // For User role company that are the position the company has
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offers      Offer[]
  skills      JobSkill[]
  createdAt   DateTime  @default(now())
}

model Offer {
  id          Int     @id @default(autoincrement())
  userId      Int?    // User that has been selected
  jobId       Int
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Job         Job     @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  StartDate   DateTime?
  EndDate     DateTime?
  show        Boolean @default(true) // For proffessionals to show or hide the offer from the public view in their experience
  applications Application[]
  createdAt   DateTime  @default(now())
}

model Application {
  id          Int     @id @default(autoincrement())
  userId      Int
  offerId     Int
  statusId    Int
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offer       Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status      ApplicationStatus @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url         String
  suggestion  String?
  ranking              ApplicationRanking?  @relation(fields: [rankingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankingId            Int?
  selectionTag         SelectionProbabilityTag? @relation(fields: [selectionTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selectionTagId       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ApplicationRanking {
  id            Int            @id @default(autoincrement())
  applicationId Int
  criteriaId    Int
  score         Float          // Score of the criteria
  Application   Application[]
  Criteria      RankingCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RankingCriteria {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  weight      Float   // Weight of the criteria
  rankings    ApplicationRanking[]
}

model SelectionProbabilityTag {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  applications Application[]
}

model ApplicationStatus {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  applications Application[]
}

model Skill {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  users   UserSkill[]
  jobs    JobSkill[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserSkill {
  userId Int
  skillId Int
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Skill  Skill @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@id([userId, skillId])
}

model JobSkill {
  jobId Int
  skillId Int
  Job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Skill  Skill @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@id([jobId, skillId])
}